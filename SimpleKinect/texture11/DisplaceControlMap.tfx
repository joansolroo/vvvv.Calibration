//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

float2 x0y0 = {-1,-1};
float2 x1y0 = { 1,-1};
float2 x0y1 = {-1, 1};
float2 x1y1 = { 1, 1};

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};
float2 UVSpace (float2 input) {
	float2 c = (input+1)/2;
	return float2(c.x,1-c.y);
}
float2 RemappedUV(float2 uv){
	return  (x0y0) * (1-uv.x) * (1-uv.y)+
		    (x1y0) * (  uv.x) * (1-uv.y)+
		    (x0y1) * (1-uv.x) * (  uv.y)+
			(x1y1) * (  uv.x) * (  uv.y);
}
float4 PS_UV(psInput input) : SV_Target
{
	float4 c = float4(RemappedUV(input.uv),0,1);
	return c;
}

technique10 UV_control
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_UV()));
	}
}
float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,RemappedUV(input.uv));
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



